# do pip install and import
from playwright.async_api import async_playwright
import pytest_asyncio                               # asyncio
from page_objects  import *                         # import data from page_objects file
from playwright.async_api import TimeoutError       # to catch the situation when the element I am waiting for doesn't appear within the given timeout
                                                    # this is for captcha case


# Common fixture for browser session
@pytest_asyncio.fixture()                            # decorator indicates it is a coroutine (cooperative (through yielding) routine (function))
async def browser():
    async with async_playwright() as p:              # 'async with' is for correct start and shutdown in async mode: when the block is finished, resources are released
        browser = await p.chromium.launch(headless=True)     # I use chromium browser, GUI is visible
        # Yield: The control is passed to the test / another fixture that depends on this one. This allows a test / fixtures to run while the browser is available
        yield browser             
        await browser.close() # once yield is ready close the browser


# Fixture for creating a new page and navigating to a URL (common logic)
@pytest_asyncio.fixture()
async def setup_page(browser):
    #Context, allows to open multiple pages that share the same cookies, cache, and local storage 
    context = await browser.new_context()
    page = await context.new_page() 
    await page.goto(test_url)
    yield page
    await page.close()
    await context.close()

# fixture to click a 'Contact Us' link on a landing page
@pytest_asyncio.fixture()
async def submit_form(setup_page):                   # here I use a previous fixture as an input
    page = setup_page
    await page.get_by_role("link", name="Contact Us").click()
    await page.wait_for_load_state('networkidle')    # let us wait when all elements of the page are loaded, so the network becomes literally 'silent'
    yield page


# fixture to submit some data via 'Contact Us' form
@pytest_asyncio.fixture()
async def submit_contact_us_form(submit_form):
    page = submit_form

    # fill the form fields with data loaded from page_objects.py. I use placeholders' text to match input value and the field
    await page.fill('input[placeholder="Enter your name"]', name)
    await page.fill('input[placeholder="Enter your address"]', city)
    await page.fill('input[placeholder="Enter your email"]', email)
    await page.fill('input[placeholder="Enter your phone number"]', phone)
    await page.fill('input[placeholder="Type the subject"]', subject)
    # for message input I use locator. Despite the field also has a placeholder text (like above) it can not make an input using it. 
    # It may happen bc the page is generated by AI, but I am not sure
    await page.locator('xpath=//*[@id="textarea_comp-kqx72xe2"]').fill(message) 
    await page.get_by_role("button", name="Submit").click()                    # click 'Submit' button

    # this block tries to check if CAPTCHA is present. And thi part is flaky, so I will try to do something with it later
    # captcha appears when I run test too often and I believe wix controls it to protect its infra
    try:
        captcha_present = await page.wait_for_selector('css-selector-for-captcha', timeout=35000)  
        if captcha_present:
            print("CAPTCHA detected. Please solve it manually.")
            # Wait for manual CAPTCHA solving
            input("Please solve the CAPTCHA manually and press Enter to continue...")
    except TimeoutError:
        print("No CAPTCHA detected, proceeding with form submission...")

    # screenshot after processing, let us think it is a debugging tool for this specific test
    await page.screenshot(path='./after_processing.png')
    yield page


@pytest_asyncio.fixture()
async def create_new_user(submit_form):
    page = submit_form

    await page.get_by_role("button", name = "Log in").click()
    await page.get_by_role("button", name = "Sign up with email").click()
    yield page
    